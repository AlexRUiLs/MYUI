<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>One Game Launcher - MYUI - Simple theme</title>
    <link rel="icon" type="image/x-icon" href="favicon.ico">
    <style>
        body {
            background-color: #36393f;
            color: #ffffff;
            font-family: Arial, sans-serif;
        }

        .game-tile {
            background-color: #2c2f33;
            border: 1px solid #7289da;
            padding: 0;
            margin: 5px;
            display: inline-block;
            cursor: pointer;
            color: #ffffff;
            border-radius: 5px;
            transition: transform 0.2s;
            width: 110px;
            height: 160px;
            text-align: center;
            overflow: hidden;
            position: relative;
        }

            .game-tile img {
                width: 110px;
                height: 160px;
                border-radius: 5px;
                position: absolute;
                top: 0;
                left: 0;
                z-index: 1;
                object-fit: cover;
            }

            .game-tile .text-content {
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
                z-index: 0;
                padding: 10px;
                box-sizing: border-box;
                background-color: #2c2f33;
            }

            .game-tile:hover {
                transform: scale(1.05);
                background-color: #7289da;
            }

        .game-title {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            width: 100%;
            margin-bottom: 5px;
        }

        h1 {
            color: #7289da;
        }

        .switch {
            position: relative;
            display: inline-block;
            width: 60px;
            height: 34px;
            transition: all 0.3s ease;
            outline: none;
        }

            .switch input {
                opacity: 0;
                width: 0;
                height: 0;
            }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
        }

            .slider:before {
                position: absolute;
                content: "";
                height: 26px;
                width: 26px;
                left: 4px;
                bottom: 4px;
                background-color: white;
                transition: .4s;
            }

        input:checked + .slider {
            background-color: #2196F3;
        }

            input:checked + .slider:before {
                transform: translateX(26px);
            }

        .slider.round {
            border-radius: 34px;
        }

            .slider.round:before {
                border-radius: 50%;
            }

        .spinner {
            border: 6px solid #f3f3f3;
            border-radius: 50%;
            border-top: 6px solid #7289da;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 20px auto;
            display: none;
        }

        @keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        dialog {
            background-color: #2c2f33;
            color: #ffffff;
            border: 1px solid #7289da;
            border-radius: 5px;
            padding: 20px;
            width: 300px;
        }

            dialog::backdrop {
                background-color: rgba(0, 0, 0, 0.8);
            }

        .fallback-tile {
            width: 100%;
            height: 100%;
            background-color: #444444;
            display: flex;
            align-items: center;
            justify-content: center;
            text-align: center;
            padding: 20px;
            box-sizing: border-box;
            border-radius: 5px;
        }

        .fallback-title {
            color: #ffffff;
            font-size: 24px;
            font-weight: bold;
            word-wrap: break-word;
        }

        .game-tile .fallback-tile {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1;
            margin: 0;
            border-radius: 5px;
        }

        .game-tile.focused {
            transform: scale(1.05);
            box-shadow: 0 0 10px rgba(114, 137, 218, 0.8);
            border-color: #ffffff;
        }

        .control-buttons {
            display: flex;
            gap: 10px;
            align-items: center;
        }

        .control-button {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            border: 2px solid #ffffff;
            background: rgba(0, 0, 0, 0.5);
            color: #ffffff;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            transition: all 0.3s ease;
            padding: 0;
            line-height: 0;
            text-align: center;
            position: relative;
            outline: none;
        }

        .control-button#close-button::before {
            content: "✕";
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }

        .control-button#minimize-button::before {
            content: "−";
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }

        .control-button:hover {
            background: rgba(255, 255, 255, 0.3);
        }

        .control-button.focused {
            transform: scale(1.2);
            box-shadow: 0 0 15px rgba(114, 137, 218, 0.8);
            border-color: #7289da;
            background: rgba(255, 255, 255, 0.3);
            z-index: 10;
        }

        .switch.focused {
            transform: scale(1.2);
            box-shadow: 0 0 15px rgba(114, 137, 218, 0.8);
            z-index: 10;
        }

        .switch.focused .slider {
            border: 2px solid #7289da;
            background-color: #2196F3;
            opacity: 0.8;
        }

        .control-button, .switch {
            transition: all 0.2s ease-in-out;
        }
    </style>
</head>
<body>
    <div style="display: flex; align-items: center;" class="control-buttons">
        <button class="control-button" id="minimize-button" title="Minimize" tabindex="0"></button>
        <button class="control-button" id="close-button" title="Close" tabindex="0"></button>
        <label class="switch" tabindex="0">
            <input type="checkbox" id="cover-art-toggle">
            <span class="slider round"></span>
        </label>
        <p style="margin-left: 10px;">Hide cover art</p>
    </div>

    <div id="games-tiles">
        <!-- Games tiles will be populated here -->
    </div>

    <!-- Spinner for loading state -->
    <div class="spinner" id="loading-spinner"></div>

    <!-- Confirmation dialog -->
    <dialog id="confirm-dialog">
        <p id="confirm-message"></p>
        <button id="confirm-yes">Yes</button>
        <button id="confirm-no">No</button>
    </dialog>

    <!-- Alert dialog -->
    <dialog id="alert-dialog">
        <p id="alert-message"></p>
        <button id="alert-ok">OK</button>
    </dialog>

    <script>
        let isLaunchingGame = false;

        document.addEventListener("DOMContentLoaded", function () {
            const loadingSpinner = document.getElementById('loading-spinner');
            loadingSpinner.style.display = 'block';

            const apiEndpoint = 'http://localhost:8080/GetAllGames';

            fetch(apiEndpoint)
                .then(response => response.json())
                .then(data => {
                    loadingSpinner.style.display = 'none';
                    const gamesList = data;
                    const tilesContainer = document.getElementById('games-tiles');

                    gamesList.forEach(game => {
                        let coverArtUrl = game.CoverArtUrl;
                        
                        const tile = document.createElement('div');
                        tile.className = 'game-tile';
                        tile.title = game.Title;

                        tile.innerHTML = `
                                <img src="${coverArtUrl}" alt="${game.Title} Cover Art" class="cover-art">
                                <div class="fallback-tile" style="display: none;">
                                    <div class="fallback-title">${game.Title}</div>
                                </div>
                                <div class="text-content">
                                    <strong class="game-title">${game.Title}</strong>
                                    <p>${game.Store}</p>
                                </div>
                            `;

                        const imgElement = tile.querySelector('img');
                        const fallbackTile = tile.querySelector('.fallback-tile');

                        imgElement.onerror = () => {
                            console.error('Failed to load image:', coverArtUrl);
                            imgElement.style.display = 'none';
                            fallbackTile.style.display = 'flex';
                        };

                        imgElement.onload = () => {
                            imgElement.style.display = 'block';
                            fallbackTile.style.display = 'none';
                        };

                        tile.onclick = function () {
                            launchGame(game);
                        };

                        tilesContainer.appendChild(tile);
                    });

                    // Initialize focus on the first game tile
                    updateFocus();
                })
                .catch(error => {
                    loadingSpinner.style.display = 'none';
                    console.error('Error fetching games list:', error);
                    showAlert('Failed to fetch games list. Make sure OGL MYUI API server is running.');
                });

            document.getElementById('cover-art-toggle').addEventListener('change', function () {
                const coverArts = document.querySelectorAll('.cover-art');
                const textContents = document.querySelectorAll('.text-content');
                coverArts.forEach(img => {
                    img.style.display = this.checked ? 'none' : 'block';
                });
                textContents.forEach(text => {
                    text.style.zIndex = this.checked ? '1' : '0';
                });
            });

            document.getElementById('minimize-button').addEventListener('click', function () {
                fetch('http://localhost:8080/MinimizeAppWindow')
                    .catch(error => console.error('Error minimizing window:', error));
            });

            document.getElementById('close-button').addEventListener('click', function () {
                fetch('http://localhost:8080/CloseAppWindow')
                    .catch(error => console.error('Error closing window:', error));
            });

            // Add keyboard support
            let currentIndex = 0;
            let keysPressed = new Set();
            let animationFrameId = null;
            let keyHoldStartTime = 0;
            let isPageScrolling = false;
            let lastButtonPressTime = 0;
            let isInControlButtons = false;
            let currentControlIndex = -1;
            let keyScrollTargetIndex = 0;
            const holdThreshold = 200;
            const scrollSpeed = 0.08;
            const debounceTime = 300;
            const itemsToScroll = 4;
            const pageScrollSpeed = 0.15;
            const controlElements = ['minimize-button', 'close-button', 'cover-art-toggle'];

            function updateFocus() {
                const gameTiles = document.getElementsByClassName('game-tile');
                for (let i = 0; i < gameTiles.length; i++) {
                    if (i === Math.round(currentIndex)) {
                        gameTiles[i].classList.add('focused');
                    } else {
                        gameTiles[i].classList.remove('focused');
                    }
                }
            }

            function updateCarousel() {
                const currentTime = Date.now();
                const isHolding = currentTime - keyHoldStartTime > holdThreshold;
                const gameTiles = document.getElementsByClassName('game-tile');

                if (isPageScrolling) {
                    const diff = keyScrollTargetIndex - currentIndex;
                    if (Math.abs(diff) > 0.01) {
                        currentIndex += diff * pageScrollSpeed;
                    } else {
                        currentIndex = keyScrollTargetIndex;
                        isPageScrolling = false;
                    }
                } else if (keysPressed.has('ArrowLeft') || keysPressed.has('a')) {
                    if (isHolding) {
                        currentIndex = Math.max(currentIndex - scrollSpeed, 0);
                    }
                } else if (keysPressed.has('ArrowRight') || keysPressed.has('d')) {
                    if (isHolding) {
                        currentIndex = Math.min(currentIndex + scrollSpeed, gameTiles.length - 1);
                    }
                }

                currentIndex = Math.max(0, Math.min(currentIndex, gameTiles.length - 1));
                updateFocus();

                if (keysPressed.size > 0 || isPageScrolling) {
                    animationFrameId = requestAnimationFrame(updateCarousel);
                } else {
                    cancelAnimationFrame(animationFrameId);
                    animationFrameId = null;
                }
            }

            function updateControlButtonsFocus() {
                console.log('Updating control buttons focus. Current control index:', currentControlIndex);

                // Remove focus from all elements
                document.querySelectorAll('.control-button, .switch').forEach(el => {
                    el.classList.remove('focused');
                });

                document.querySelectorAll('.game-tile').forEach(tile => {
                    tile.classList.remove('focused');
                });

                if (isInControlButtons && currentControlIndex >= 0) {
                    const currentElement = document.getElementById(controlElements[currentControlIndex]);
                    if (currentElement) {
                        if (currentElement.id === 'cover-art-toggle') {
                            const switchLabel = currentElement.parentElement;
                            switchLabel.classList.add('focused');
                        } else {
                            currentElement.classList.add('focused');
                        }
                    }
                }
            }


            document.addEventListener('keydown', (event) => {
                const currentTime = Date.now();
                const gameTiles = document.getElementsByClassName('game-tile');

                console.log('Key down event:', event.key);

                if (isInControlButtons) {
                    // Handle controls navigation
                    if ((event.key === 'ArrowLeft' || event.key === 'a' || event.key === 'GamepadLeft') &&
                        currentTime - lastButtonPressTime > debounceTime) {
                        lastButtonPressTime = currentTime;
                        currentControlIndex = (currentControlIndex - 1 + controlElements.length) % controlElements.length;
                        updateControlButtonsFocus();
                        event.preventDefault();
                    } else if ((event.key === 'ArrowRight' || event.key === 'd' || event.key === 'GamepadRight') &&
                        currentTime - lastButtonPressTime > debounceTime) {
                        lastButtonPressTime = currentTime;
                        currentControlIndex = (currentControlIndex + 1) % controlElements.length;
                        updateControlButtonsFocus();
                        event.preventDefault();
                    } else if ((event.key === 'ArrowDown' || event.key === 's') &&
                        currentTime - lastButtonPressTime > debounceTime) {
                        lastButtonPressTime = currentTime;
                        isInControlButtons = false;
                        currentControlIndex = -1;
                        updateControlButtonsFocus();
                        updateFocus();
                        event.preventDefault();
                    } else if (event.key === 'Enter' || event.key === ' ') {
                        handleControlAction(controlElements[currentControlIndex]);
                        event.preventDefault();
                    }
                    return;
                }

                // Handle game tiles navigation
                if ((event.key === 'ArrowUp' || event.key === 'w' || event.key === 'GamepadUp') &&
                    currentTime - lastButtonPressTime > debounceTime) {
                    lastButtonPressTime = currentTime;
                    isInControlButtons = true;
                    currentControlIndex = 0;
                    updateControlButtonsFocus();
                    event.preventDefault();
                } else if ((event.key === 'PageUp' || event.key === 'PageDown') &&
                    currentTime - lastButtonPressTime > debounceTime) {
                    lastButtonPressTime = currentTime;
                    isPageScrolling = true;

                    if (event.key === 'PageUp') {
                        keyScrollTargetIndex = Math.min(Math.round(currentIndex + itemsToScroll), gameTiles.length - 1);
                    } else {
                        keyScrollTargetIndex = Math.max(Math.round(currentIndex - itemsToScroll), 0);
                    }

                    if (animationFrameId === null) {
                        animationFrameId = requestAnimationFrame(updateCarousel);
                    }
                } else if ((event.key === 'ArrowLeft' || event.key === 'a' ||
                    event.key === 'ArrowRight' || event.key === 'd' ||
                    event.key === 'GamepadLeft' || event.key === 'GamepadRight') &&
                    !keysPressed.has(event.key)) {
                    if (event.key === 'ArrowLeft' || event.key === 'a' || event.key === 'GamepadLeft') {
                        currentIndex = Math.max(Math.round(currentIndex - 1), 0);
                    } else {
                        currentIndex = Math.min(Math.round(currentIndex + 1), gameTiles.length - 1);
                    }
                    updateFocus();

                    keysPressed.add(event.key);
                    keyHoldStartTime = Date.now();
                    if (animationFrameId === null) {
                        animationFrameId = requestAnimationFrame(updateCarousel);
                    }
                } else if (event.key === 'Enter' || event.key === ' ') {
                    const selectedTile = gameTiles[Math.round(currentIndex)];
                    if (selectedTile) {
                        selectedTile.click();
                    }
                }
            });


            document.addEventListener('keyup', (event) => {
                if (keysPressed.has(event.key)) {
                    keysPressed.delete(event.key);
                    if (keysPressed.size === 0) {
                        cancelAnimationFrame(animationFrameId);
                        animationFrameId = null;
                        currentIndex = Math.round(currentIndex);
                        updateFocus();
                    }
                }
            });

            // Update gamepad support
            window.addEventListener("gamepadconnected", function (e) {
                console.log("Gamepad connected:", e.gamepad);
                let gamepadHoldStartTime = 0;
                let isGamepadHolding = false;
                let isShoulderScrolling = false;
                let keyScrollTargetIndex = 0;

                function gamepadLoop() {
                    const gamepad = navigator.getGamepads()[e.gamepad.index];
                    const currentTime = Date.now();
                    const gameTiles = document.getElementsByClassName('game-tile');

                    if (gamepad) {
                        if (isInControlButtons) {
                            // Handle controls navigation with gamepad
                            if ((gamepad.axes[0] < -0.5 || gamepad.buttons[14].pressed) &&
                                (currentTime - lastButtonPressTime > debounceTime)) { // D-pad Left
                                lastButtonPressTime = currentTime;
                                currentControlIndex = (currentControlIndex - 1 + controlElements.length) % controlElements.length;
                                updateControlButtonsFocus();
                            } else if ((gamepad.axes[0] > 0.5 || gamepad.buttons[15].pressed) &&
                                (currentTime - lastButtonPressTime > debounceTime)) { // D-pad Right
                                lastButtonPressTime = currentTime;
                                currentControlIndex = (currentControlIndex + 1) % controlElements.length;
                                updateControlButtonsFocus();
                            } else if (gamepad.buttons[13].pressed && (currentTime - lastButtonPressTime > debounceTime)) { // Down
                                lastButtonPressTime = currentTime;
                                isInControlButtons = false;
                                currentControlIndex = -1;
                                updateControlButtonsFocus();
                                updateFocus();
                            } else if (gamepad.buttons[0].pressed && (currentTime - lastButtonPressTime > debounceTime)) { // A button
                                lastButtonPressTime = currentTime;
                                handleControlAction(controlElements[currentControlIndex]);
                            }
                            return;
                        }

                        // Handle game tiles navigation with gamepad
                        if (gamepad.buttons[12].pressed && (currentTime - lastButtonPressTime > debounceTime)) { // Up
                            lastButtonPressTime = currentTime;
                            isInControlButtons = true;
                            currentControlIndex = 0;
                            updateControlButtonsFocus();
                        } else if ((gamepad.buttons[4].pressed || gamepad.buttons[5].pressed) &&
                            !isShoulderScrolling && (currentTime - lastButtonPressTime > debounceTime)) {
                            lastButtonPressTime = currentTime;
                            isShoulderScrolling = true;

                            if (gamepad.buttons[4].pressed) { // LB
                                keyScrollTargetIndex = Math.max(Math.round(currentIndex - itemsToScroll), 0);
                            } else { // RB
                                keyScrollTargetIndex = Math.min(Math.round(currentIndex + itemsToScroll), gameTiles.length - 1);
                            }
                        }

                        if (isShoulderScrolling) {
                            const diff = keyScrollTargetIndex - currentIndex;
                            if (Math.abs(diff) > 0.01) {
                                currentIndex += diff * pageScrollSpeed;
                            } else {
                                currentIndex = keyScrollTargetIndex;
                                isShoulderScrolling = false;
                            }
                        } else if (gamepad.axes[0] < -0.5 || gamepad.buttons[14].pressed) { // D-pad Left
                            currentIndex = Math.max(currentIndex - scrollSpeed, 0);
                        } else if (gamepad.axes[0] > 0.5 || gamepad.buttons[15].pressed) { // D-pad Right
                            currentIndex = Math.min(currentIndex + scrollSpeed, gameTiles.length - 1);
                        }

                        currentIndex = Math.max(0, Math.min(currentIndex, gameTiles.length - 1));
                        updateFocus();

                        if (gamepad.buttons[0].pressed) { // A button
                            const selectedTile = gameTiles[Math.round(currentIndex)];
                            if (selectedTile) {
                                selectedTile.click();
                            }
                        }

                        requestAnimationFrame(gamepadLoop);
                    }
                }

                requestAnimationFrame(gamepadLoop);
            });
        });

        function showConfirmDialog(message, onConfirm) {
            const confirmDialog = document.getElementById('confirm-dialog');
            const confirmMessage = document.getElementById('confirm-message');
            const confirmYes = document.getElementById('confirm-yes');
            const confirmNo = document.getElementById('confirm-no');

            confirmMessage.textContent = message;

            confirmYes.onclick = function () {
                confirmDialog.close();
                onConfirm();
            };

            confirmNo.onclick = function () {
                confirmDialog.close();
            };

            confirmDialog.showModal();
        }

        function launchGame(game) {
            if (isLaunchingGame) return;
            isLaunchingGame = true;

            fetch(`http://localhost:8080/LaunchGame?Id=${game.Id}&Store=${game.Store}`)
                .then(response => response.text())
                .then(data => {
                    // Immediately call CloseOrMinimizeAppWindowAfterGameLaunch
                    fetch('http://localhost:8080/CloseOrMinimizeAppWindowAfterGameLaunch')
                        .then(() => {
                            // Wait for 1 second before refreshing the page
                            setTimeout(() => {
                                window.location.reload();
                            }, 1000);
                        })
                        .catch(error => {
                            console.error('Error minimizing window:', error);
                        });
                })
                .catch(error => {
                    console.error('Error launching game:', error);
                })
                .finally(() => {
                    setTimeout(() => {
                        isLaunchingGame = false;
                    }, 3000); // Wait for 3 seconds before setting isLaunchingGame to false
                });
        }

        function showAlert(message) {
            const alertDialog = document.getElementById('alert-dialog');
            const alertMessage = document.getElementById('alert-message');
            const alertOk = document.getElementById('alert-ok');

            alertMessage.textContent = message;

            alertOk.onclick = function () {
                alertDialog.close();
            };

            alertDialog.showModal();
        }

        function handleControlAction(elementId) {
            switch (elementId) {
                case 'minimize-button':
                    fetch('http://localhost:8080/MinimizeAppWindow')
                        .catch(error => console.error('Error minimizing window:', error));
                    break;
                case 'close-button':
                    fetch('http://localhost:8080/CloseAppWindow')
                        .catch(error => console.error('Error closing window:', error));
                    break;
                case 'cover-art-toggle':
                    document.getElementById('cover-art-toggle').click();
                    break;
            }
        }
    </script>
</body>
</html>
