<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Game Launcher - Xbox 360 Style</title>
    <style>
        body {
            background: url('bg_red.webp') no-repeat center center fixed;
            background-size: cover;
            color: #ffffff;
            font-family: Arial, sans-serif;
            overflow: hidden;
            margin: 0;
            padding: 0;
        }

        .control-buttons {
            position: fixed;
            top: 20px;
            left: 20px;
            display: flex;
            gap: 10px;
            z-index: 1000;
        }

        .control-button {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            border: 2px solid #ffffff;
            background: rgba(0, 0, 0, 0.5);
            color: #ffffff;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            transition: all 0.3s ease;
            padding: 0;
            line-height: 0;
            text-align: center;
            position: relative;
        }

        .control-button#close-button {
            font-size: 24px;
        }

        .control-button#minimize-button {
            font-size: 28px;
            line-height: 0;
        }

        .control-button#close-button::before {
            content: "✕";
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }

        .control-button#minimize-button::before {
            content: "−";
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }

        .control-button.focused {
            transform: scale(1.2);
            box-shadow: 0 0 20px rgba(255, 255, 255, 0.8);
            background: rgba(255, 255, 255, 0.2);
        }

        .control-button:hover {
            background: rgba(255, 255, 255, 0.3);
        }

        .dashboard {
            display: flex;
            justify-content: flex-start; /* Aligns content to the start */
            align-items: center; /* Centered vertically */
            height: 100vh;
            perspective: 1000px;
            overflow: hidden;
            padding-left: 5%; /* Add this line */
        }

        .carousel {
            display: flex;
            transform-style: preserve-3d;
            transition: transform 1s;
            align-items: center; /* Centered vertically within the carousel */
        }

        .game-tile {
            padding: 0;
            margin: 5px;
            display: inline-block;
            cursor: pointer;
            border-radius: 10px;
            width: 360px;
            height: 540px;
            text-align: center;
            overflow: hidden;
            position: absolute;
            transform-origin: center;
            transition: transform 0.3s, box-shadow 0.3s, border 0.3s;
            z-index: 1;
        }

            .game-tile img {
                width: 100%;
                height: 100%;
                border-radius: 10px;
            }

            .game-tile.focused {
                transform: scale(1.2); /* Further scale up for focus effect */
                box-shadow: 0 0 30px rgba(255, 255, 255, 1); /* Stronger glow effect */
                border: 2px solid #ffffff; /* Add border to make it stand out */
            }

            .game-tile.launching {
                animation: none; /* Remove the animation from here */
                z-index: 100;
            }

            @keyframes launchGame {
                0% {
                    transform: translateX(var(--tile-x)) translateZ(var(--tile-z)) scale(1.2);
                    opacity: 1;
                }
                50% {
                    transform: translateX(var(--tile-x)) translateZ(var(--tile-z)) scale(2);
                    opacity: 0.5;
                }
                100% {
                    transform: translateX(var(--tile-x)) translateZ(var(--tile-z)) scale(3);
                    opacity: 0;
                }
            }

        .spinner {
            border: 6px solid #f3f3f3;
            border-radius: 50%;
            border-top: 6px solid #7289da;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 20px auto;
            display: none;
        }

        @keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        dialog {
            background-color: #2c2f33;
            color: #ffffff;
            border: 1px solid #7289da;
            border-radius: 5px;
            padding: 20px;
            width: 300px;
        }

            dialog::backdrop {
                background-color: rgba(0, 0, 0, 0.8);
            }

        .fallback-tile {
            width: 100%;
            height: 100%;
            background-color: #444444;
            display: flex;
            align-items: center;
            justify-content: center;
            text-align: center;
            padding: 20px;
            box-sizing: border-box;
            border-radius: 10px;
        }

        .fallback-title {
            color: #ffffff;
            font-size: 24px;
            font-weight: bold;
            word-wrap: break-word;
        }

        /* Add a flash effect to the background when launching */
        .dashboard::after {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: white;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.3s;
        }

        .dashboard.launching::after {
            animation: flashBackground 1s ease-out forwards;
        }

        @keyframes flashBackground {
            0% {
                opacity: 0;
            }
            50% {
                opacity: 0.3;
            }
            100% {
                opacity: 0;
            }
        }
    </style>
</head>
<body>
    <div class="control-buttons">
        <button class="control-button" id="minimize-button" title="Minimize"></button>
        <button class="control-button" id="close-button" title="Close"></button>
    </div>
    <div class="dashboard">
        <div class="carousel" id="games-tiles">
            <!-- Game tiles will be populated here -->
        </div>
    </div>

    <!-- Spinner for loading state -->
    <div class="spinner" id="loading-spinner"></div>

    <!-- Confirmation dialog -->
    <dialog id="confirm-dialog">
        <p id="confirm-message"></p>
        <button id="confirm-yes">Yes</button>
        <button id="confirm-no">No</button>
    </dialog>

    <!-- Alert dialog -->
    <dialog id="alert-dialog">
        <p id="alert-message"></p>
        <button id="alert-ok">OK</button>
    </dialog>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const loadingSpinner = document.getElementById('loading-spinner');
            loadingSpinner.style.display = 'block';
            let currentIndex = 0; // Move this to global scope within DOMContentLoaded

            const apiEndpoint = 'http://localhost:8080/GetAllGames';

            fetch(apiEndpoint)
                .then(response => response.json())
                .then(data => {
                    loadingSpinner.style.display = 'none';
                    const gamesList = data;
                    initCarousel(gamesList);
                })
                .catch(error => {
                    loadingSpinner.style.display = 'none';
                    console.error('Error fetching games list:', error);
                    showAlert('Failed to fetch games list. Make sure OGL MYUI API server is running.');
                });

            function initCarousel(gamesList) {
                const carousel = document.getElementById('games-tiles');
                const tileWidth = 360; // Updated size
                const tileDepth = 150;  // Updated depth

                gamesList.forEach((game, index) => {
                    let coverArtUrl = game.CoverArtUrl;
                    
                    const tile = document.createElement('div');
                    tile.className = 'game-tile';
                    tile.title = game.Title;
                    tile.style.transform = `translateX(${index * tileWidth}px) translateZ(${-index * tileDepth}px)`;

                    tile.innerHTML = `
                        <img src="${coverArtUrl}" 
                             alt="${game.Title} Cover Art" 
                             class="cover-art">
                        <div class="fallback-tile" style="display: none;">
                            <div class="fallback-title">${game.Title}</div>
                        </div>
                    `;

                    const imgElement = tile.querySelector('img');
                    const fallbackTile = tile.querySelector('.fallback-tile');

                    imgElement.onerror = () => {
                        console.error('Failed to load image:', coverArtUrl);
                        imgElement.style.display = 'none';
                        fallbackTile.style.display = 'flex';
                    };

                    imgElement.onload = () => {
                        imgElement.style.display = 'block';
                        fallbackTile.style.display = 'none';
                    };

                    tile.onclick = function () {
                        launchGame(game, tile);
                    };

                    carousel.appendChild(tile);
                });

                let lastButtonPressTime = 0;
                const debounceTime = 300; // Milliseconds
                const scrollSpeed = 0.08;
                const holdThreshold = 200;

                function updateFocus() {
                    const gameTiles = document.getElementsByClassName('game-tile');
                    for (let i = 0; i < gameTiles.length; i++) {
                        if (i === currentIndex) {
                            gameTiles[i].classList.add('focused');
                        } else {
                            gameTiles[i].classList.remove('focused');
                        }
                    }
                }

                document.addEventListener('wheel', (event) => {
                    if (event.deltaY > 0) {
                        currentIndex = Math.min(currentIndex + 1, gamesList.length - 1);
                    } else if (event.deltaY < 0) {
                        currentIndex = Math.max(currentIndex - 1, 0);
                    }
                    carousel.style.transform = `translateX(${-currentIndex * tileWidth}px) translateZ(${currentIndex * tileDepth}px)`;
                    updateFocus();
                });

                // Gamepad support
                window.addEventListener("gamepadconnected", function (e) {
                    console.log("Gamepad connected:", e.gamepad);
                    let gamepadHoldStartTime = 0;
                    let isGamepadHolding = false;
                    let isShoulderScrolling = false;
                    let targetIndex = 0;
                    const itemsToScroll = 4;
                    const shoulderScrollSpeed = 0.15;

                    function gamepadLoop() {
                        const gamepad = navigator.getGamepads()[e.gamepad.index];
                        const currentTime = Date.now();

                        if (gamepad) {
                            // Handle shoulder button presses (LB/RB)
                            if ((gamepad.buttons[4].pressed || gamepad.buttons[5].pressed) && 
                                !isShoulderScrolling && (currentTime - lastButtonPressTime > debounceTime)) {
                                lastButtonPressTime = currentTime;
                                isShoulderScrolling = true;
                                
                                // Calculate target index
                                if (gamepad.buttons[4].pressed) { // LB
                                    targetIndex = Math.max(Math.round(currentIndex - itemsToScroll), 0);
                                } else { // RB
                                    targetIndex = Math.min(Math.round(currentIndex + itemsToScroll), gamesList.length - 1);
                                }
                            }

                            // Handle shoulder button smooth scrolling
                            if (isShoulderScrolling) {
                                const diff = targetIndex - currentIndex;
                                if (Math.abs(diff) > 0.01) {
                                    currentIndex += diff * shoulderScrollSpeed;
                                } else {
                                    currentIndex = targetIndex;
                                    isShoulderScrolling = false;
                                }
                            }

                            // Handle D-Pad Up/Down for control buttons navigation
                            if (gamepad.buttons[12].pressed && (currentTime - lastButtonPressTime > debounceTime)) { // DPad Up
                                lastButtonPressTime = currentTime;
                                if (!isInControlButtons) {
                                    isInControlButtons = true;
                                    updateControlButtonsFocus();
                                } else {
                                    // Navigate between control buttons
                                    const buttons = document.querySelectorAll('.control-button');
                                    const currentButtonIndex = Array.from(buttons).indexOf(document.activeElement);
                                    const prevIndex = (currentButtonIndex - 1 + buttons.length) % buttons.length;
                                    buttons[prevIndex].focus();
                                    updateControlButtonsFocus();
                                }
                            }

                            if (gamepad.buttons[13].pressed && (currentTime - lastButtonPressTime > debounceTime)) { // DPad Down
                                lastButtonPressTime = currentTime;
                                if (isInControlButtons) {
                                    returnToCarousel();
                                }
                            }

                            // D-Pad Left/Right handling
                            if (gamepad.buttons[14].pressed || gamepad.buttons[15].pressed) {
                                if (!isGamepadHolding && !isShoulderScrolling) {
                                    // Initial press
                                    isGamepadHolding = true;
                                    gamepadHoldStartTime = currentTime;
                                    
                                    if (!isInControlButtons) {
                                        // Single press movement for carousel
                                        if (gamepad.buttons[14].pressed) { // Left
                                            currentIndex = Math.max(currentIndex - 1, 0);
                                        } else { // Right
                                            currentIndex = Math.min(currentIndex + 1, gamesList.length - 1);
                                        }
                                    } else {
                                        // Navigate between control buttons
                                        const buttons = document.querySelectorAll('.control-button');
                                        const currentButtonIndex = Array.from(buttons).indexOf(document.activeElement);
                                        if (gamepad.buttons[14].pressed) { // Left
                                            const prevIndex = (currentButtonIndex - 1 + buttons.length) % buttons.length;
                                            buttons[prevIndex].focus();
                                        } else { // Right
                                            const nextIndex = (currentButtonIndex + 1) % buttons.length;
                                            buttons[nextIndex].focus();
                                        }
                                        updateControlButtonsFocus();
                                    }
                                } else if (currentTime - gamepadHoldStartTime > holdThreshold && !isShoulderScrolling && !isInControlButtons) {
                                    // Continuous scrolling after hold threshold (only for carousel)
                                    if (gamepad.buttons[14].pressed) { // Left
                                        currentIndex = Math.max(currentIndex - scrollSpeed, 0);
                                    } else { // Right
                                        currentIndex = Math.min(currentIndex + scrollSpeed, gamesList.length - 1);
                                    }
                                }
                            } else {
                                // No D-Pad pressed
                                if (isGamepadHolding) {
                                    isGamepadHolding = false;
                                    if (!isShoulderScrolling && !isInControlButtons) {
                                        currentIndex = Math.round(currentIndex);
                                    }
                                }
                            }

                            // Check 'A' button press
                            if (gamepad.buttons[0].pressed && (currentTime - lastButtonPressTime > debounceTime)) {
                                lastButtonPressTime = currentTime;
                                if (!isInControlButtons) {
                                    const selectedGame = gamesList[Math.round(currentIndex)];
                                    const currentTile = document.getElementsByClassName('game-tile')[Math.round(currentIndex)];
                                    launchGame(selectedGame, currentTile);
                                } else {
                                    // Handle control button action directly
                                    const activeButton = document.activeElement;
                                    if (activeButton && activeButton.classList.contains('control-button')) {
                                        handleControlButtonAction(activeButton.id);
                                    }
                                }
                            }

                            if (!isInControlButtons) {
                                carousel.style.transform = `translateX(${-currentIndex * tileWidth}px) translateZ(${currentIndex * tileDepth}px)`;
                                updateFocus();
                            }
                        }

                        requestAnimationFrame(gamepadLoop);
                    }

                    gamepadLoop();
                });

                // Initialize focus on the first game tile
                updateFocus();

                // Add keyboard support
                let keysPressed = new Set();
                let animationFrameId = null;
                let keyHoldStartTime = 0;
                let isPageScrolling = false;
                let isVerticalScrolling = false;
                let keyScrollTargetIndex = 0;
                let lastPageScrollTime = 0;
                let lastVerticalScrollTime = 0;
                let isInControlButtons = false;
                const itemsToScroll = 4;
                const pageScrollSpeed = 0.15;
                const pageScrollDebounce = 100;
                const verticalScrollDebounce = 100;

                // Function to update control buttons focus
                function updateControlButtonsFocus() {
                    const buttons = document.querySelectorAll('.control-button');
                    buttons.forEach((button, index) => {
                        button.classList.remove('focused');
                    });
                    if (isInControlButtons) {
                        const activeButton = document.activeElement;
                        if (activeButton && activeButton.classList.contains('control-button')) {
                            activeButton.classList.add('focused');
                        } else {
                            document.getElementById('minimize-button').classList.add('focused');
                            document.getElementById('minimize-button').focus();
                        }
                    }
                }

                function updateCarousel() {
                    const currentTime = Date.now();
                    const isHolding = currentTime - keyHoldStartTime > holdThreshold;

                    if (isPageScrolling) {
                        const diff = keyScrollTargetIndex - currentIndex;
                        if (Math.abs(diff) > 0.01) {
                            currentIndex += diff * pageScrollSpeed;
                        } else {
                            currentIndex = keyScrollTargetIndex;
                            isPageScrolling = false;
                            lastPageScrollTime = currentTime;
                        }
                    } else if (keysPressed.has('ArrowLeft')) {
                        if (isHolding) {
                            currentIndex = Math.max(currentIndex - scrollSpeed, 0);
                        }
                    } else if (keysPressed.has('ArrowRight')) {
                        if (isHolding) {
                            currentIndex = Math.min(currentIndex + scrollSpeed, gamesList.length - 1);
                        }
                    }

                    if (!isInControlButtons) {
                        currentIndex = Math.max(0, Math.min(currentIndex, gamesList.length - 1));
                        carousel.style.transform = `translateX(${-currentIndex * tileWidth}px) translateZ(${currentIndex * tileDepth}px)`;
                        updateFocus();
                    }

                    if (keysPressed.size > 0 || isPageScrolling) {
                        animationFrameId = requestAnimationFrame(updateCarousel);
                    } else {
                        cancelAnimationFrame(animationFrameId);
                        animationFrameId = null;
                    }
                }

                // Setup control buttons functionality
                function handleControlButtonAction(buttonId) {
                    const endpoint = buttonId === 'close-button' ? 
                        'http://localhost:8080/CloseAppWindow' : 
                        'http://localhost:8080/MinimizeAppWindow';

                    fetch(endpoint)
                        .then(response => response.text())
                        .catch(error => {
                            console.error(`Error with ${buttonId}:`, error);
                        });
                }

                document.getElementById('close-button').addEventListener('click', (e) => {
                    if (e.detail > 0) { // Only handle actual clicks, not synthetic ones from Enter/Space
                        handleControlButtonAction('close-button');
                    }
                });

                document.getElementById('minimize-button').addEventListener('click', (e) => {
                    if (e.detail > 0) { // Only handle actual clicks, not synthetic ones from Enter/Space
                        handleControlButtonAction('minimize-button');
                    }
                });

                document.addEventListener('keydown', (event) => {
                    const currentTime = Date.now();
                    
                    if ((event.key === 'PageUp' || event.key === 'PageDown') && !isInControlButtons) {
                        if (!isPageScrolling && currentTime - lastPageScrollTime > pageScrollDebounce) {
                            isPageScrolling = true;
                            if (event.key === 'PageUp') {
                                keyScrollTargetIndex = Math.min(Math.round(currentIndex + itemsToScroll), gamesList.length - 1);
                            } else {
                                keyScrollTargetIndex = Math.max(Math.round(currentIndex - itemsToScroll), 0);
                            }
                            if (animationFrameId === null) {
                                animationFrameId = requestAnimationFrame(updateCarousel);
                            }
                        }
                    } else if (event.key === 'ArrowUp' || event.key === 'w') {
                        if (!isInControlButtons) {
                            isInControlButtons = true;
                            updateControlButtonsFocus();
                        } else {
                            // Navigate between control buttons
                            const buttons = document.querySelectorAll('.control-button');
                            const currentIndex = Array.from(buttons).indexOf(document.activeElement);
                            const prevIndex = (currentIndex - 1 + buttons.length) % buttons.length;
                            buttons[prevIndex].focus();
                            updateControlButtonsFocus();
                        }
                    } else if (event.key === 'ArrowDown' || event.key === 's') {
                        if (isInControlButtons) {
                            returnToCarousel();
                            event.preventDefault();
                        }
                    } else if ((event.key === 'ArrowLeft' || event.key === 'ArrowRight' || event.key === 'a' || event.key === 'd') && 
                              !keysPressed.has(event.key) && !isPageScrolling) {
                        if (!isInControlButtons) {
                            if (event.key === 'ArrowLeft' || event.key === 'a') {
                                currentIndex = Math.max(Math.round(currentIndex - 1), 0);
                            } else {
                                currentIndex = Math.min(Math.round(currentIndex + 1), gamesList.length - 1);
                            }
                            carousel.style.transform = `translateX(${-currentIndex * tileWidth}px) translateZ(${currentIndex * tileDepth}px)`;
                            updateFocus();

                            keysPressed.add(event.key);
                            keyHoldStartTime = Date.now();
                            if (animationFrameId === null) {
                                animationFrameId = requestAnimationFrame(updateCarousel);
                            }
                        } else {
                            // Navigate between control buttons
                            const buttons = document.querySelectorAll('.control-button');
                            const currentIndex = Array.from(buttons).indexOf(document.activeElement);
                            if (event.key === 'ArrowLeft' || event.key === 'a') {
                                const prevIndex = (currentIndex - 1 + buttons.length) % buttons.length;
                                buttons[prevIndex].focus();
                            } else {
                                const nextIndex = (currentIndex + 1) % buttons.length;
                                buttons[nextIndex].focus();
                            }
                            updateControlButtonsFocus();
                        }
                    } else if ((event.key === 'Enter' || event.key === ' ')) {
                        if (!isInControlButtons) {
                            const selectedGame = gamesList[Math.round(currentIndex)];
                            const currentTile = document.getElementsByClassName('game-tile')[Math.round(currentIndex)];
                            launchGame(selectedGame, currentTile);
                        } else {
                            // Handle control button action directly instead of triggering click
                            const activeButton = document.activeElement;
                            if (activeButton && activeButton.classList.contains('control-button')) {
                                handleControlButtonAction(activeButton.id);
                            }
                        }
                    }
                });

                document.addEventListener('keyup', (event) => {
                    if (event.key === 'ArrowLeft' || event.key === 'ArrowRight' || event.key === 'a' || event.key === 'd') {
                        keysPressed.delete(event.key);
                        if (keysPressed.size === 0 && !isPageScrolling && !isVerticalScrolling) {
                            cancelAnimationFrame(animationFrameId);
                            animationFrameId = null;
                            currentIndex = Math.round(currentIndex);
                            carousel.style.transform = `translateX(${-currentIndex * tileWidth}px) translateZ(${currentIndex * tileDepth}px)`;
                            updateFocus();
                        }
                    }
                });

                function returnToCarousel() {
                    isInControlButtons = false;
                    document.activeElement.blur();
                    const buttons = document.querySelectorAll('.control-button');
                    buttons.forEach(button => {
                        button.classList.remove('focused');
                    });
                    updateFocus();
                }
            }

            function showConfirmDialog(message, onConfirm) {
                const confirmDialog = document.getElementById('confirm-dialog');
                const confirmMessage = document.getElementById('confirm-message');
                const confirmYes = document.getElementById('confirm-yes');
                const confirmNo = document.getElementById('confirm-no');

                confirmMessage.textContent = message;

                confirmYes.onclick = function () {
                    confirmDialog.close();
                    onConfirm();
                };

                confirmNo.onclick = function () {
                    confirmDialog.close();
                };

                confirmDialog.showModal();
            }

            function launchGame(game, targetTile) {
                const dashboard = document.querySelector('.dashboard');
                
                // Send LaunchGame request immediately
                const getEndpoint = `http://localhost:8080/LaunchGame?Id=${game.Id}&Store=${game.Store}`;
                fetch(getEndpoint)
                    .then(response => response.text())
                    .catch(error => {
                        console.error('Error launching game:', error);
                        return;
                    });
                
                // Calculate the current transform values from the tile's current transform
                const currentTransform = targetTile.style.transform;
                const translateX = currentTransform.match(/translateX\(([-\d.]+)px\)/);
                const translateZ = currentTransform.match(/translateZ\(([-\d.]+)px\)/);
                
                const tileX = translateX ? translateX[1] + 'px' : '0px';
                const tileZ = translateZ ? translateZ[1] + 'px' : '0px';
                
                // Set CSS variables for the animation
                targetTile.style.setProperty('--tile-x', tileX);
                targetTile.style.setProperty('--tile-z', tileZ);
                
                // Add launching animation classes
                targetTile.classList.add('launching');
                dashboard.classList.add('launching');
                
                // Apply the animation programmatically
                targetTile.style.animation = 'launchGame 1s ease-in forwards';

                // Wait for animation to complete before minimizing/closing
                setTimeout(() => {
                    // Remove animation classes and styles after launch
                    targetTile.classList.remove('launching');
                    dashboard.classList.remove('launching');
                    targetTile.style.animation = '';
                    
                    // Minimize/close the window after animation completes
                    fetch('http://localhost:8080/CloseOrMinimizeAppWindowAfterGameLaunch')
                        .then(() => {
                            // Refresh the page after minimizing/closing
                            window.location.reload();
                        })
                        .catch(error => {
                            console.error('Error minimizing window:', error);
                        });
                }, 800); // Slightly shorter than the animation duration to ensure smooth transition
            }

            function showAlert(message) {
                const alertDialog = document.getElementById('alert-dialog');
                const alertMessage = document.getElementById('alert-message');
                const alertOk = document.getElementById('alert-ok');

                alertMessage.textContent = message;

                alertOk.onclick = function () {
                    alertDialog.close();
                };

                alertDialog.showModal();
            }
        });
    </script>
</body>
</html>