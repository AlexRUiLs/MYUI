<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>One Game Launcher - Modern Design</title>
    <link rel="icon" type="image/x-icon" href="favicon.ico">
    <style>
        :root {
            --primary: #6366f1;
            --primary-dark: #4f46e5;
            --background: #0f172a;
            --surface: #1e293b;
            --text: #f8fafc;
            --text-secondary: #94a3b8;
            --accent: #22d3ee;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background-color: var(--background);
            color: var(--text);
            font-family: 'Segoe UI', system-ui, -apple-system, sans-serif;
            min-height: 100vh;
            padding: 2rem;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            background: var(--surface);
            padding: 1rem;
            border-radius: 1rem;
            box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);
        }

        .control-buttons {
            display: flex;
            gap: 1rem;
            align-items: center;
        }

        .control-button {
            background: transparent;
            border: 2px solid var(--primary);
            color: var(--primary);
            width: 40px;
            height: 40px;
            border-radius: 12px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.25rem;
            transition: all 0.3s ease;
        }

        .control-button:hover {
            background: var(--primary);
            color: var(--text);
            transform: translateY(-2px);
        }

        .control-button.focused {
            background: var(--primary);
            color: var(--text);
            box-shadow: 0 0 0 3px var(--primary-dark);
        }

        .games-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 1.5rem;
            padding: 1rem;
        }

        .game-tile {
            background: var(--surface);
            border-radius: 1rem;
            overflow: hidden;
            transition: all 0.3s ease;
            position: relative;
            aspect-ratio: 3/4;
            cursor: pointer;
        }

        .game-tile img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: all 0.3s ease;
        }

        .game-tile .text-content {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            padding: 1.5rem;
            background: linear-gradient(transparent, rgba(0, 0, 0, 0.9));
            color: var(--text);
            transform: translateY(100%);
            transition: all 0.3s ease;
        }

        .game-tile:hover .text-content,
        .game-tile.focused .text-content {
            transform: translateY(0);
        }

        .game-tile:hover,
        .game-tile.focused {
            transform: translateY(-4px);
            box-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.25);
        }

        .game-title {
            font-size: 1.25rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: var(--text);
        }

        .store-name {
            font-size: 0.875rem;
            color: var(--text-secondary);
        }

        .fallback-tile {
            width: 100%;
            height: 100%;
            background: linear-gradient(45deg, var(--primary-dark), var(--primary));
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 1.5rem;
            text-align: center;
        }

        .spinner {
            width: 50px;
            height: 50px;
            border: 4px solid var(--surface);
            border-top: 4px solid var(--primary);
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 2rem auto;
            display: none;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        dialog {
            background: var(--surface);
            color: var(--text);
            border: none;
            border-radius: 1rem;
            padding: 2rem;
            max-width: 400px;
            box-shadow: 0 25px 50px -12px rgb(0 0 0 / 0.25);
        }

        dialog::backdrop {
            background: rgba(0, 0, 0, 0.7);
            backdrop-filter: blur(4px);
        }

        dialog button {
            background: var(--primary);
            color: var(--text);
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 0.5rem;
            cursor: pointer;
            font-size: 1rem;
            margin-top: 1rem;
            margin-right: 0.5rem;
            transition: all 0.2s ease;
        }

        dialog button:hover {
            background: var(--primary-dark);
        }

        @media (max-width: 768px) {
            body {
                padding: 1rem;
            }

            .games-grid {
                grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
                gap: 1rem;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="control-buttons">
            <button class="control-button" id="minimize-button" title="Minimize" tabindex="0">−</button>
            <button class="control-button" id="close-button" title="Close" tabindex="0">×</button>
        </div>
    </div>

    <div id="games-tiles" class="games-grid">
        <!-- Games tiles will be populated here -->
    </div>

    <div class="spinner" id="loading-spinner"></div>

    <dialog id="confirm-dialog">
        <p id="confirm-message"></p>
        <button id="confirm-yes">Yes</button>
        <button id="confirm-no">No</button>
    </dialog>

    <dialog id="alert-dialog">
        <p id="alert-message"></p>
        <button id="alert-ok">OK</button>
    </dialog>

    <script>
        let isLaunchingGame = false;

        document.addEventListener("DOMContentLoaded", function () {
            const loadingSpinner = document.getElementById('loading-spinner');
            loadingSpinner.style.display = 'block';

            const apiEndpoint = 'http://localhost:8080/GetAllGames';

            fetch(apiEndpoint)
                .then(response => response.json())
                .then(data => {
                    loadingSpinner.style.display = 'none';
                    const gamesList = data;
                    const tilesContainer = document.getElementById('games-tiles');

                    gamesList.forEach(game => {
                        let coverArtUrl = game.CoverArtUrl;
                        
                        const tile = document.createElement('div');
                        tile.className = 'game-tile';
                        tile.title = game.Title;

                        tile.innerHTML = `
                            <img src="${coverArtUrl}" alt="${game.Title} Cover Art" class="cover-art">
                            <div class="fallback-tile" style="display: none;">
                                <div class="game-title">${game.Title}</div>
                            </div>
                            <div class="text-content">
                                <div class="game-title">${game.Title}</div>
                                <div class="store-name">${game.Store}</div>
                            </div>
                        `;

                        const imgElement = tile.querySelector('img');
                        const fallbackTile = tile.querySelector('.fallback-tile');

                        imgElement.onerror = () => {
                            console.error('Failed to load image:', coverArtUrl);
                            imgElement.style.display = 'none';
                            fallbackTile.style.display = 'flex';
                        };

                        imgElement.onload = () => {
                            imgElement.style.display = 'block';
                            fallbackTile.style.display = 'none';
                        };

                        tile.onclick = function () {
                            launchGame(game);
                        };

                        tilesContainer.appendChild(tile);
                    });

                    updateFocus();
                })
                .catch(error => {
                    loadingSpinner.style.display = 'none';
                    console.error('Error fetching games list:', error);
                    showAlert('Failed to fetch games list. Make sure OGL MYUI API server is running.');
                });

            document.getElementById('minimize-button').addEventListener('click', function () {
                fetch('http://localhost:8080/MinimizeAppWindow')
                    .catch(error => console.error('Error minimizing window:', error));
            });

            document.getElementById('close-button').addEventListener('click', function () {
                fetch('http://localhost:8080/CloseAppWindow')
                    .catch(error => console.error('Error closing window:', error));
            });

            let currentIndex = 0;
            let keysPressed = new Set();
            let animationFrameId = null;
            let keyHoldStartTime = 0;
            let isPageScrolling = false;
            let lastButtonPressTime = 0;
            let isInControlButtons = false;
            let currentControlIndex = -1;
            let keyScrollTargetIndex = 0;
            const holdThreshold = 200;
            const scrollSpeed = 0.08;
            const debounceTime = 300;
            const itemsToScroll = 4;
            const pageScrollSpeed = 0.15;
            const controlElements = ['minimize-button', 'close-button'];

            function updateFocus() {
                const gameTiles = document.getElementsByClassName('game-tile');
                for (let i = 0; i < gameTiles.length; i++) {
                    if (i === Math.round(currentIndex)) {
                        gameTiles[i].classList.add('focused');
                    } else {
                        gameTiles[i].classList.remove('focused');
                    }
                }
            }

            function updateCarousel() {
                const currentTime = Date.now();
                const isHolding = currentTime - keyHoldStartTime > holdThreshold;
                const gameTiles = document.getElementsByClassName('game-tile');

                if (isPageScrolling) {
                    const diff = keyScrollTargetIndex - currentIndex;
                    if (Math.abs(diff) > 0.01) {
                        currentIndex += diff * pageScrollSpeed;
                    } else {
                        currentIndex = keyScrollTargetIndex;
                        isPageScrolling = false;
                    }
                } else if (keysPressed.has('ArrowLeft') || keysPressed.has('a')) {
                    if (isHolding) {
                        currentIndex = Math.max(currentIndex - scrollSpeed, 0);
                    }
                } else if (keysPressed.has('ArrowRight') || keysPressed.has('d')) {
                    if (isHolding) {
                        currentIndex = Math.min(currentIndex + scrollSpeed, gameTiles.length - 1);
                    }
                }

                currentIndex = Math.max(0, Math.min(currentIndex, gameTiles.length - 1));
                updateFocus();

                if (keysPressed.size > 0 || isPageScrolling) {
                    animationFrameId = requestAnimationFrame(updateCarousel);
                } else {
                    cancelAnimationFrame(animationFrameId);
                    animationFrameId = null;
                }
            }

            function updateControlButtonsFocus() {
                document.querySelectorAll('.control-button').forEach(el => {
                    el.classList.remove('focused');
                });

                document.querySelectorAll('.game-tile').forEach(tile => {
                    tile.classList.remove('focused');
                });

                if (isInControlButtons && currentControlIndex >= 0) {
                    const currentElement = document.getElementById(controlElements[currentControlIndex]);
                    if (currentElement) {
                        currentElement.classList.add('focused');
                    }
                }
            }

            document.addEventListener('keydown', (event) => {
                const currentTime = Date.now();
                const gameTiles = document.getElementsByClassName('game-tile');

                if (isInControlButtons) {
                    if ((event.key === 'ArrowLeft' || event.key === 'a' || event.key === 'GamepadLeft') &&
                        currentTime - lastButtonPressTime > debounceTime) {
                        lastButtonPressTime = currentTime;
                        currentControlIndex = (currentControlIndex - 1 + controlElements.length) % controlElements.length;
                        updateControlButtonsFocus();
                        event.preventDefault();
                    } else if ((event.key === 'ArrowRight' || event.key === 'd' || event.key === 'GamepadRight') &&
                        currentTime - lastButtonPressTime > debounceTime) {
                        lastButtonPressTime = currentTime;
                        currentControlIndex = (currentControlIndex + 1) % controlElements.length;
                        updateControlButtonsFocus();
                        event.preventDefault();
                    } else if ((event.key === 'ArrowDown' || event.key === 's') &&
                        currentTime - lastButtonPressTime > debounceTime) {
                        lastButtonPressTime = currentTime;
                        isInControlButtons = false;
                        currentControlIndex = -1;
                        updateControlButtonsFocus();
                        updateFocus();
                        event.preventDefault();
                    } else if (event.key === 'Enter' || event.key === ' ') {
                        handleControlAction(controlElements[currentControlIndex]);
                        event.preventDefault();
                    }
                    return;
                }

                if ((event.key === 'ArrowUp' || event.key === 'w' || event.key === 'GamepadUp') &&
                    currentTime - lastButtonPressTime > debounceTime) {
                    lastButtonPressTime = currentTime;
                    isInControlButtons = true;
                    currentControlIndex = 0;
                    updateControlButtonsFocus();
                    event.preventDefault();
                } else if ((event.key === 'PageUp' || event.key === 'PageDown') &&
                    currentTime - lastButtonPressTime > debounceTime) {
                    lastButtonPressTime = currentTime;
                    isPageScrolling = true;

                    if (event.key === 'PageUp') {
                        keyScrollTargetIndex = Math.min(Math.round(currentIndex + itemsToScroll), gameTiles.length - 1);
                    } else {
                        keyScrollTargetIndex = Math.max(Math.round(currentIndex - itemsToScroll), 0);
                    }

                    if (animationFrameId === null) {
                        animationFrameId = requestAnimationFrame(updateCarousel);
                    }
                } else if ((event.key === 'ArrowLeft' || event.key === 'a' ||
                    event.key === 'ArrowRight' || event.key === 'd' ||
                    event.key === 'GamepadLeft' || event.key === 'GamepadRight') &&
                    !keysPressed.has(event.key)) {
                    if (event.key === 'ArrowLeft' || event.key === 'a' || event.key === 'GamepadLeft') {
                        currentIndex = Math.max(Math.round(currentIndex - 1), 0);
                    } else {
                        currentIndex = Math.min(Math.round(currentIndex + 1), gameTiles.length - 1);
                    }
                    updateFocus();

                    keysPressed.add(event.key);
                    keyHoldStartTime = Date.now();
                    if (animationFrameId === null) {
                        animationFrameId = requestAnimationFrame(updateCarousel);
                    }
                } else if (event.key === 'Enter' || event.key === ' ') {
                    const selectedTile = gameTiles[Math.round(currentIndex)];
                    if (selectedTile) {
                        selectedTile.click();
                    }
                }
            });

            document.addEventListener('keyup', (event) => {
                if (keysPressed.has(event.key)) {
                    keysPressed.delete(event.key);
                    if (keysPressed.size === 0) {
                        cancelAnimationFrame(animationFrameId);
                        animationFrameId = null;
                        currentIndex = Math.round(currentIndex);
                        updateFocus();
                    }
                }
            });

            window.addEventListener("gamepadconnected", function (e) {
                console.log("Gamepad connected:", e.gamepad);
                let gamepadHoldStartTime = 0;
                let isGamepadHolding = false;
                let isShoulderScrolling = false;
                let keyScrollTargetIndex = 0;

                function gamepadLoop() {
                    const gamepad = navigator.getGamepads()[e.gamepad.index];
                    const currentTime = Date.now();
                    const gameTiles = document.getElementsByClassName('game-tile');

                    if (gamepad) {
                        if (isInControlButtons) {
                            if ((gamepad.axes[0] < -0.5 || gamepad.buttons[14].pressed) &&
                                (currentTime - lastButtonPressTime > debounceTime)) {
                                lastButtonPressTime = currentTime;
                                currentControlIndex = (currentControlIndex - 1 + controlElements.length) % controlElements.length;
                                updateControlButtonsFocus();
                            } else if ((gamepad.axes[0] > 0.5 || gamepad.buttons[15].pressed) &&
                                (currentTime - lastButtonPressTime > debounceTime)) {
                                lastButtonPressTime = currentTime;
                                currentControlIndex = (currentControlIndex + 1) % controlElements.length;
                                updateControlButtonsFocus();
                            } else if (gamepad.buttons[13].pressed && (currentTime - lastButtonPressTime > debounceTime)) {
                                lastButtonPressTime = currentTime;
                                isInControlButtons = false;
                                currentControlIndex = -1;
                                updateControlButtonsFocus();
                                updateFocus();
                            } else if (gamepad.buttons[0].pressed && (currentTime - lastButtonPressTime > debounceTime)) {
                                lastButtonPressTime = currentTime;
                                handleControlAction(controlElements[currentControlIndex]);
                            }
                            return;
                        }

                        if (gamepad.buttons[12].pressed && (currentTime - lastButtonPressTime > debounceTime)) {
                            lastButtonPressTime = currentTime;
                            isInControlButtons = true;
                            currentControlIndex = 0;
                            updateControlButtonsFocus();
                        } else if ((gamepad.buttons[4].pressed || gamepad.buttons[5].pressed) &&
                            !isShoulderScrolling && (currentTime - lastButtonPressTime > debounceTime)) {
                            lastButtonPressTime = currentTime;
                            isShoulderScrolling = true;

                            if (gamepad.buttons[4].pressed) {
                                keyScrollTargetIndex = Math.max(Math.round(currentIndex - itemsToScroll), 0);
                            } else {
                                keyScrollTargetIndex = Math.min(Math.round(currentIndex + itemsToScroll), gameTiles.length - 1);
                            }
                        }

                        if (isShoulderScrolling) {
                            const diff = keyScrollTargetIndex - currentIndex;
                            if (Math.abs(diff) > 0.01) {
                                currentIndex += diff * pageScrollSpeed;
                            } else {
                                currentIndex = keyScrollTargetIndex;
                                isShoulderScrolling = false;
                            }
                        } else if (gamepad.axes[0] < -0.5 || gamepad.buttons[14].pressed) {
                            currentIndex = Math.max(currentIndex - scrollSpeed, 0);
                        } else if (gamepad.axes[0] > 0.5 || gamepad.buttons[15].pressed) {
                            currentIndex = Math.min(currentIndex + scrollSpeed, gameTiles.length - 1);
                        }

                        currentIndex = Math.max(0, Math.min(currentIndex, gameTiles.length - 1));
                        updateFocus();

                        if (gamepad.buttons[0].pressed) {
                            const selectedTile = gameTiles[Math.round(currentIndex)];
                            if (selectedTile) {
                                selectedTile.click();
                            }
                        }

                        requestAnimationFrame(gamepadLoop);
                    }
                }

                requestAnimationFrame(gamepadLoop);
            });
        });

        function showConfirmDialog(message, onConfirm) {
            const confirmDialog = document.getElementById('confirm-dialog');
            const confirmMessage = document.getElementById('confirm-message');
            const confirmYes = document.getElementById('confirm-yes');
            const confirmNo = document.getElementById('confirm-no');

            confirmMessage.textContent = message;

            confirmYes.onclick = function () {
                confirmDialog.close();
                onConfirm();
            };

            confirmNo.onclick = function () {
                confirmDialog.close();
            };

            confirmDialog.showModal();
        }

        function launchGame(game) {
            if (isLaunchingGame) return;
            isLaunchingGame = true;

            fetch(`http://localhost:8080/LaunchGame?Id=${game.Id}&Store=${game.Store}`)
                .then(response => response.text())
                .then(data => {
                    fetch('http://localhost:8080/CloseOrMinimizeAppWindowAfterGameLaunch')
                        .then(() => {
                            setTimeout(() => {
                                window.location.reload();
                            }, 1000);
                        })
                        .catch(error => {
                            console.error('Error minimizing window:', error);
                        });
                })
                .catch(error => {
                    console.error('Error launching game:', error);
                })
                .finally(() => {
                    setTimeout(() => {
                        isLaunchingGame = false;
                    }, 3000);
                });
        }

        function showAlert(message) {
            const alertDialog = document.getElementById('alert-dialog');
            const alertMessage = document.getElementById('alert-message');
            const alertOk = document.getElementById('alert-ok');

            alertMessage.textContent = message;

            alertOk.onclick = function () {
                alertDialog.close();
            };

            alertDialog.showModal();
        }

        function handleControlAction(elementId) {
            switch (elementId) {
                case 'minimize-button':
                    fetch('http://localhost:8080/MinimizeAppWindow')
                        .catch(error => console.error('Error minimizing window:', error));
                    break;
                case 'close-button':
                    fetch('http://localhost:8080/CloseAppWindow')
                        .catch(error => console.error('Error closing window:', error));
                    break;
            }
        }
    </script>
</body>
</html>